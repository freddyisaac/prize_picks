// Code generated by MockGen. DO NOT EDIT.
// Source: das/das.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	das "dinocage/das"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDataAccessProvider is a mock of DataAccessProvider interface.
type MockDataAccessProvider struct {
	ctrl     *gomock.Controller
	recorder *MockDataAccessProviderMockRecorder
}

// MockDataAccessProviderMockRecorder is the mock recorder for MockDataAccessProvider.
type MockDataAccessProviderMockRecorder struct {
	mock *MockDataAccessProvider
}

// NewMockDataAccessProvider creates a new mock instance.
func NewMockDataAccessProvider(ctrl *gomock.Controller) *MockDataAccessProvider {
	mock := &MockDataAccessProvider{ctrl: ctrl}
	mock.recorder = &MockDataAccessProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDataAccessProvider) EXPECT() *MockDataAccessProviderMockRecorder {
	return m.recorder
}

// AddDinosaur mocks base method.
func (m *MockDataAccessProvider) AddDinosaur(ctx context.Context, d das.Dinosaur) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddDinosaur", ctx, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDinosaur indicates an expected call of AddDinosaur.
func (mr *MockDataAccessProviderMockRecorder) AddDinosaur(ctx, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDinosaur", reflect.TypeOf((*MockDataAccessProvider)(nil).AddDinosaur), ctx, d)
}

// Close mocks base method.
func (m *MockDataAccessProvider) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockDataAccessProviderMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDataAccessProvider)(nil).Close))
}

// GetCages mocks base method.
func (m *MockDataAccessProvider) GetCages(ctx context.Context, optStatus ...string) ([]das.Cage, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range optStatus {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCages", varargs...)
	ret0, _ := ret[0].([]das.Cage)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCages indicates an expected call of GetCages.
func (mr *MockDataAccessProviderMockRecorder) GetCages(ctx interface{}, optStatus ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, optStatus...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCages", reflect.TypeOf((*MockDataAccessProvider)(nil).GetCages), varargs...)
}

// GetDinosaurs mocks base method.
func (m *MockDataAccessProvider) GetDinosaurs(ctx context.Context, opts ...string) ([]das.Dinosaur, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetDinosaurs", varargs...)
	ret0, _ := ret[0].([]das.Dinosaur)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDinosaurs indicates an expected call of GetDinosaurs.
func (mr *MockDataAccessProviderMockRecorder) GetDinosaurs(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDinosaurs", reflect.TypeOf((*MockDataAccessProvider)(nil).GetDinosaurs), varargs...)
}

// GetDinosaursForCage mocks base method.
func (m *MockDataAccessProvider) GetDinosaursForCage(ctx context.Context, cageID int) ([]das.Dinosaur, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDinosaursForCage", ctx, cageID)
	ret0, _ := ret[0].([]das.Dinosaur)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDinosaursForCage indicates an expected call of GetDinosaursForCage.
func (mr *MockDataAccessProviderMockRecorder) GetDinosaursForCage(ctx, cageID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDinosaursForCage", reflect.TypeOf((*MockDataAccessProvider)(nil).GetDinosaursForCage), ctx, cageID)
}

// NewCage mocks base method.
func (m *MockDataAccessProvider) NewCage(ctx context.Context, cap int, kind string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewCage", ctx, cap, kind)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewCage indicates an expected call of NewCage.
func (mr *MockDataAccessProviderMockRecorder) NewCage(ctx, cap, kind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewCage", reflect.TypeOf((*MockDataAccessProvider)(nil).NewCage), ctx, cap, kind)
}

// PlaceDinosaurInCage mocks base method.
func (m *MockDataAccessProvider) PlaceDinosaurInCage(ctx context.Context, cageID int, d das.Dinosaur) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlaceDinosaurInCage", ctx, cageID, d)
	ret0, _ := ret[0].(error)
	return ret0
}

// PlaceDinosaurInCage indicates an expected call of PlaceDinosaurInCage.
func (mr *MockDataAccessProviderMockRecorder) PlaceDinosaurInCage(ctx, cageID, d interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlaceDinosaurInCage", reflect.TypeOf((*MockDataAccessProvider)(nil).PlaceDinosaurInCage), ctx, cageID, d)
}

// SetCageStatus mocks base method.
func (m *MockDataAccessProvider) SetCageStatus(ctx context.Context, cageID int, status string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetCageStatus", ctx, cageID, status)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetCageStatus indicates an expected call of SetCageStatus.
func (mr *MockDataAccessProviderMockRecorder) SetCageStatus(ctx, cageID, status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCageStatus", reflect.TypeOf((*MockDataAccessProvider)(nil).SetCageStatus), ctx, cageID, status)
}
